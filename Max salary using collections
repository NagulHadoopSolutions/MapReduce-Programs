//shema : names,gender,salary     
//Query : Finding Max salary 
------------------------------------------------------------
import java.io.IOException;
import java.util.TreeMap;


import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.lib.input.*;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.*;
public class SalSUm 
{
	public static class MyMapper extends Mapper<LongWritable,Text,Text,Text>
	{
		public void map(LongWritable key,Text value,Context con) throws IOException, InterruptedException
		{
			String arr[]=value.toString().split(",");
			
		con.write(new Text(arr[0]), new Text(arr[0]+","+arr[2]));   //name and salary	
		}
		
	}
	public static class MyReducer extends Reducer<Text,Text,Text,Text>
	{
		TreeMap<String,Float> tm=new TreeMap<String,Float>();
		public void reduce(Text key,Iterable<Text> value,Context con) throws IOException, InterruptedException
		{
				
					
		for(Text l:value)
		{
			      String arr[]=l.toString().split(",");
					tm.put(arr[0], Float.parseFloat(arr[1]));  // name, salary
				
					if(tm.size()>1)
					{
					tm.remove(tm.firstKey());	
											
					}	        
		}
				 		
		}
		public void cleanup(Context context) throws IOException, InterruptedException
		{
			context.write(new Text("max sal :"), new Text(tm.toString()));
		}
	}
	public static void main(String[] args) throws IOException, ClassNotFoundException, InterruptedException
	{
		
		Configuration cfg=new Configuration();
		Job job=Job.getInstance(cfg,"Max salary");
		job.setJarByClass(SalSUm.class);
		job.setMapperClass(MyMapper.class);
		job.setMapOutputKeyClass(Text.class);
		job.setMapOutputValueClass(Text.class);
		job.setReducerClass(MyReducer.class);
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(Text.class);
		FileInputFormat.addInputPath(job,new Path(args[0]));
		 FileSystem.get(cfg).delete(new Path(args[1]),true);
		FileOutputFormat.setOutputPath(job,new Path(args[1]));
		  System.exit(job.waitForCompletion(true) ? 0 : 1);
	}

}

